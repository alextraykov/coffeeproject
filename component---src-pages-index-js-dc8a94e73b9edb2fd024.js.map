{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/BlogCard.js","webpack:///./src/components/CardGrid.js"],"names":["query","IndexPage","props","articleCards","data","testArr","concat","edges","size","color","height","type","large","items","small","align","path","Conatainer","styled","div","item","ImageWrapper","Image","src","TextBox","colors","white","Title","h1","Subtitle","h3","Icon","CoffeeSvg","img","Text","p","BlogCard","card","childMarkdownRemark","frontmatter","title","featuredImage","icon","excerpt","childImageSharp","original","Spacing","Button","Container","CardGrid","map","index","node","key","id","Math","floor","random"],"mappings":"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","file":"component---src-pages-index-js-dc8a94e73b9edb2fd024.js","sourcesContent":["import React from \"react\";\r\n\r\nimport GlobalStyle from \"../style/global/GlobalStyle\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Section from \"../components/Section\";\r\nimport Heading from \"../style/components/Text/Heading\";\r\nimport Text from \"../style/components/Text/Text\";\r\nimport Spacing from \"../style/components/Spacing\";\r\nimport CardGrid from \"../components/CardGrid\";\r\nimport Button from \"../components/Button\";\r\nimport Hero from \"../components/Hero\";\r\n\r\nconst IndexPage = props => {\r\n  const { articleCards } = props.data;\r\n  let testArr = []\r\n    .concat(articleCards.edges)\r\n    .concat(articleCards.edges)\r\n    .concat(articleCards.edges);\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Layout>\r\n        <Hero />\r\n        <Section>\r\n          <Heading size=\"l\" color=\"taupe\">\r\n            Brewing Recipes\r\n          </Heading>\r\n          <Spacing height=\"17px\" />\r\n          <Text type=\"button\" color=\"taupe\">\r\n            From the traditional stove-top to vacuum and drip pots recipes - all\r\n            listed for you to enjoy\r\n          </Text>\r\n          <Spacing height=\"48px\" />\r\n          <CardGrid large items={testArr} />\r\n        </Section>\r\n        <Section small>\r\n          <Heading size=\"l\" color=\"taupe\">\r\n            Support us with a cup of coffee\r\n          </Heading>\r\n          <Spacing height=\"17px\" />\r\n          <Text type=\"button\" color=\"taupe\" align=\"center\">\r\n            We would appreciate your humble support in order to keep this\r\n            website up and running for longer. On top of that we believe that a\r\n            good cup of coffee is always welcome, right?\r\n          </Text>\r\n          <Spacing height=\"32px\" />\r\n          <Button path=\"/\">Support us</Button>\r\n        </Section>\r\n        <Section>\r\n          <Heading size=\"l\" color=\"taupe\">\r\n            Places worth visiting\r\n          </Heading>\r\n          <Spacing height=\"17px\" />\r\n          <Text type=\"button\" color=\"taupe\">\r\n            The world is big and amazing coffee places lurk around the corner\r\n          </Text>\r\n          <Spacing height=\"48px\" />\r\n          <CardGrid items={testArr} />\r\n        </Section>\r\n        <Section small>\r\n          <Heading size=\"l\" color=\"taupe\">\r\n            So you’ve almost reached the end\r\n          </Heading>\r\n          <Spacing height=\"17px\" />\r\n          <Text type=\"button\" color=\"taupe\" align=\"center\">\r\n            Your support is of great value. If you have any feedback,\r\n            suggestions or just want to say hi - please don’t hesitate to\r\n            contact us.\r\n          </Text>\r\n          <Spacing height=\"32px\" />\r\n          <Button path=\"/\">Contact us</Button>\r\n        </Section>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    articleCards: allFile(filter: { relativePath: { regex: \"/^posts//\" } }) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          childMarkdownRemark {\r\n            frontmatter {\r\n              date\r\n              excerpt\r\n              path\r\n              tags\r\n              title\r\n              featuredImage {\r\n                id\r\n                childImageSharp {\r\n                  original {\r\n                    src\r\n                  }\r\n                }\r\n              }\r\n              icon {\r\n                childImageSharp {\r\n                  original {\r\n                    src\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default IndexPage;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport colors from \"../style/colors\";\r\nimport Button from \"./Button\";\r\nimport Spacing from \"../style/components/Spacing\";\r\n\r\nconst Conatainer = styled.div`\r\n  width: ${item => (item.large ? \"100%\" : \"304px\")};\r\n  max-width: ${item => (item.large ? \"950px\" : \"none\")};\r\n  height: ${item => (item.large ? \"305px\" : \"\")};\r\n  display: flex;\r\n  flex-direction: ${item => (item.large ? \"row\" : \"column\")};\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  height: ${item => (item.large ? \"305px\" : \"150px\")};\r\n  width: ${item => (item.large ? \"305px\" : \"100%\")};\r\n  overflow: hidden;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  background: url(\"${item => {\r\n    return item.src;\r\n  }}\");\r\n  background-size: cover;\r\n  background-position: center;\r\n`;\r\n\r\nconst TextBox = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  position: relative;\r\n  padding: ${item => (item.large ? \"32px\" : \"32px 16px\")};\r\n  background: ${colors.white};\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: ${item => (item.large ? \"28px\" : \"20px\")};\r\n  line-height: 27px;\r\n  font-weight: bold;\r\n  letter-spacing: ${item => (item.large ? \"0.05em\" : \"\")};\r\n`;\r\n\r\nconst Subtitle = styled.h3`\r\n  font-size: ${item => (item.large ? \"21px\" : \"18px\")};\r\n  line-height: ${item => (item.large ? \"23px\" : \"21px\")};\r\n  color: #473e34;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n  background: #fcf5ed;\r\n  width: 56px;\r\n  height: 56px;\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst CoffeeSvg = styled.img``;\r\n\r\nconst Text = styled.p`\r\n  font-size: 14px;\r\n  line-height: 150%;\r\n  color: #333333;\r\n  max-width: ${item => (item.large ? \"440px\" : \"\")};\r\n`;\r\n\r\nconst BlogCard = props => {\r\n  const {\r\n    path,\r\n    title,\r\n    featuredImage,\r\n    icon,\r\n    excerpt\r\n  } = props.card.childMarkdownRemark.frontmatter;\r\n\r\n  return (\r\n    <Conatainer large={!!props.large}>\r\n      <ImageWrapper large={!!props.large}>\r\n        <Image src={featuredImage.childImageSharp.original.src} />\r\n      </ImageWrapper>\r\n      <TextBox large={!!props.large}>\r\n        <Title large={!!props.large}>{title}</Title>\r\n        <Spacing height=\"8px\" />\r\n        <Subtitle large={!!props.large}>Test</Subtitle>\r\n        <Spacing height=\"16px\" />\r\n        <Icon>\r\n          <CoffeeSvg src={icon.childImageSharp.original.src} />\r\n        </Icon>\r\n        <Text large={!!props.large}>{excerpt}</Text>\r\n        <Spacing height=\"16px\" />\r\n        <Button path={path}>Read the article</Button>\r\n      </TextBox>\r\n    </Conatainer>\r\n  );\r\n};\r\n\r\nBlogCard.propTypes = {\r\n  large: PropTypes.bool,\r\n  card: PropTypes.shape({\r\n    relativePath: PropTypes.string,\r\n    childMarkdownRemark: PropTypes.shape({\r\n      frontmatter: PropTypes.shape({\r\n        date: PropTypes.string,\r\n        excerpt: PropTypes.string,\r\n        featuredImage: PropTypes.shape({\r\n          childImageSharp: PropTypes.shape({\r\n            original: PropTypes.shape({\r\n              src: PropTypes.string\r\n            })\r\n          })\r\n        }),\r\n        path: PropTypes.string,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n        title: PropTypes.string\r\n      })\r\n    })\r\n  })\r\n};\r\n\r\nexport default BlogCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport BlogCard from \"./BlogCard\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  grid-template-columns: repeat(3, auto [col-start]);\r\n  grid-gap: 16px 16px;\r\n\r\n  ${props =>\r\n    props.large\r\n      ? `& > div:first-child {\r\n        grid-column: 1 / -1;\r\n    }`\r\n      : ``}\r\n`;\r\n\r\nconst CardGrid = props => {\r\n  const { large, items } = props;\r\n\r\n  return (\r\n    <Container large={!!large}>\r\n      {items.map((card, index) => {\r\n        if (large && index === 0) {\r\n          return (\r\n            <BlogCard\r\n              large\r\n              card={card.node}\r\n              key={card.node.id + Math.floor(Math.random() * 1000)}\r\n            />\r\n          );\r\n        }\r\n        return (\r\n          <BlogCard\r\n            card={card.node}\r\n            key={card.node.id + Math.floor(Math.random() * 1000)}\r\n          />\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nCardGrid.propTypes = {\r\n  large: PropTypes.bool,\r\n  items: PropTypes.array.isRequired\r\n};\r\n\r\nexport default CardGrid;\r\n"],"sourceRoot":""}